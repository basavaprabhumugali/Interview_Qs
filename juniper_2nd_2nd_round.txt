1- 32 bit unsigne int
  unsigned int i=   // value such that one bit is set
  WAP to find this bit
  
  
  int bit_find(usigned int number)
  {
	int i=0;
	if(number > 1023)    // num is greater the 
	{
		for(i=16,i<32;i++)
		{
			if( ((number >> i) & 1) )
			return i;
		}
	
	}
	esle
	
	
	for(i=0; i<16 ;i++)
	{
		if( ((number >> i) & 1) )
			return i;
	}
  
		if(m = number & 0xff)		//-> scan only 1st byte
		{
			for(i=0;i<8;i++)
			if( ((number >> i) & 1) )
			return i;
				
		}
		
		else if(m= number & 0xff00) // -> scan second byte
		{
			for(i=8;i<16;i++)
			if( ((number >> i) & 1) )
			return i;
		
		}
		
		else if(m=number & 0xff0000) //-> scan third byte
		{
			for(i=16;i<8;i++)
			if( ((number >> i) & 1) )
			return i;
		
		}
		
		else
		for(i=;i<8;i++)
			if( ((number >> i) & 1) )
			return i;		            //-> scan 4th byte
  }
  
  31st bit set -> worst
  poss=0       -> 
  
  1000 0000 0000 0000  111 1111 1111 11111  0xff

  4->  ... 0000 0100
  i=0       0000 0100 & 1 = 0
  ...
  i=3    num>>i ->   0000 0001 & 1 = 1
  
  Bubble sort
  
  arr[3] = {5,1,2}
  1 loop-  arr[0] > arr[1]  -> swalp   -> 1,5,2
  2- lopp - arr[1] > arr[2] -> swap  -> 1,2,5
  
  for(i=0;i<size;i++)
  {
	for(j=0; j<size-1-i ;i++)
	{
	
	
	}
  
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  